syntax = "proto3";

package kni;
option go_package = "pkg/apis/runtime/beta";

service KNI {
    rpc CreateNetwork(CreateNetworkRequest) returns (CreateNetworkResponse) {} //MVP
    rpc DeleteNetwork(DeleteNetworkRequest) returns (DeleteNetworkResponse) {} //MVP
    rpc AttachInterface(AttachInterfaceRequest) returns (AttachInterfaceResponse) {} //MVP
    rpc DetachInterface(DetachInterfaceRequest) returns (DetachInterfaceResponse) {} //MVP
    rpc QueryPodNetwork(QueryPodNetworkRequest) returns (QueryPodNetworkResponse) {} //MVP
    rpc SetupNodeNetwork(SetupNodeNetworkRequest) returns (SetupNodeNetworkResponse) {}
    rpc QueryNodeNetworks(QueryNodeNetworksRequest) returns (QueryNodeNetworksResponse) {}
}

message CreateNetworkRequest {
    string name = 1;
    string uid = 2;
    string namespace = 3;
    string netns_path_prefix = 4;
    map<string,string> labels = 5;
    map<string,string> annotations = 6;
    map<string,string> extradata = 7;
}

message CreateNetworkResponse {
    string netns_path = 1;
    map<string,string> extradata = 2;
}

message DeleteNetworkRequest {
    string id = 1;
    string name = 2;
    string namespace = 3;
    string netns_path = 4;
    map<string,string> extradata = 5;
}

message DeleteNetworkResponse {

}

message AttachInterfaceRequest {
    string name = 1;
    string id = 2;
    string namespace = 3;
    Isolation isolation = 4;
    DNSConfig dns_config = 5;
    repeated PortMapping port_mappings = 6;
    map<string,string> labels = 7;
    map<string,string> annotations = 8;
    map<string,string> extradata = 9;
}
    
message AttachInterfaceResponse {
    map<string, IPConfig> ipconfigs = 1;
    map<string,string> extradata = 2;
}
    
message DetachInterfaceRequest {
    string name = 1;
    string id = 2;
    string namespace = 3;
    Isolation isolation = 4;
    map<string,string> labels = 5;
    map<string,string> annotations = 6;
    map<string,string> extradata = 7;
}
    
message DetachInterfaceResponse {
}
    
message IPConfig {
    repeated string ip = 1;
    string mac = 2;
    map<string,string> extradata = 3;
}
    
message Network {
    string name = 1;
    bool ready = 2;
    map<string,string> extradata = 3;
}
    
message Isolation {
    string path = 1;
    string type = 2; //Network Namespace, kernel, â€¦
    map<string,string> extradata = 3;
}
    
// DNSConfig specifies the DNS servers and search domains of a sandbox.
message DNSConfig {
    // List of DNS servers of the cluster.
    repeated string servers = 1;
    // List of DNS search domains of the cluster.
    repeated string searches = 2;
    // List of DNS options. See https://linux.die.net/man/5/resolv.conf
    // for all available options.
    repeated string options = 3;
}

enum Protocol {
    TCP = 0;
    UDP = 1;
    SCTP = 2;
}

// PortMapping specifies the port mapping configurations of a sandbox.
message PortMapping {
    // Protocol of the port mapping.
    Protocol protocol = 1;
    // Port number within the container. Default: 0 (not specified).
    int32 container_port = 2;
    // Port number on the host. Default: 0 (not specified).
    int32 host_port = 3;
    // Host IP.
    string host_ip = 4;
}

message QueryNodeNetworksRequest {

}

message QueryNodeNetworksResponse {
    repeated Network networks = 1;
    map<string,string> extradata = 2;
}

message SetupNodeNetworkRequest {
    
}

message SetupNodeNetworkResponse {

}

message QueryPodNetworkRequest {
    string name = 1;
    string id = 2;
    string namespace = 3;
}

message QueryPodNetworkResponse {
    map<string, IPConfig> ipconfigs = 1;
    map<string,string> extradata = 2;
}